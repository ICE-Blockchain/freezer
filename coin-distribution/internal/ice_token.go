// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package coindistribution

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CoindistributionMetaData contains all meta data concerning the Coindistribution contract.
var CoindistributionMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20ZeroToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForeignTokenSelfTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBots\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAirDropper\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawStuckETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"SetUniswapRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferForeignToken\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAirDropper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradingEnabledBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"manageBoughtEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"massManageBoughtEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAirDropper\",\"type\":\"address\"}],\"name\":\"setAirDropper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setKnownBNBUniswapRouters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040525f60095f6101000a81548160ff0219169083151502179055506001600960016101000a81548160ff0219169083151502179055506001600b5f6101000a81548160ff0219169083151502179055505f600d5534801562000062575f80fd5b50336040518060400160405280600381526020017f49636500000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f49434500000000000000000000000000000000000000000000000000000000008152508160029081620000e19190620008b4565b508060039081620000f39190620008b4565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000169575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620001609190620009db565b60405180910390fd5b6200017a81620001f960201b60201c565b503360055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001ce336001620002bc60201b60201c565b620001e1306001620002bc60201b60201c565b620001f360016200037460201b60201c565b62000a2d565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620002cc6200046b60201b60201c565b80600c5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f4b89c347592b1d537e066cb4ed98d87696ae35164745d7e370e4add16941dc928260405162000368919062000a12565b60405180910390a25050565b620003846200046b60201b60201c565b620003aa737b8a01b39d58278b5de7e48c8449c9f4f5170613826200050d60201b60201c565b620003d073b971ef87ede563556b2ed4b1c0b0019111dd85d2826200050d60201b60201c565b620003f67310ed43c718714eb63d5aa57b78b54704e256024e826200050d60201b60201c565b6200041c731b81d678ffb9c0263b24a97847620c99d213eb14826200050d60201b60201c565b620004427313f4ea83d0bd40e75c8222255bc855a974568dd4826200050d60201b60201c565b62000468731b02da8cb0d097eb8d57a175b88c7d8b47997506826200050d60201b60201c565b50565b6200047b6200062160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620004a16200062860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200050b57620004cd6200062160201b60201c565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401620005029190620009db565b60405180910390fd5b565b6200051d6200046b60201b60201c565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000583576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600e5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508015158273ffffffffffffffffffffffffffffffffffffffff167f15ec7ce7d0b7216e21edf93fa0a2e776016f033369f3b69f1074f5cff69769ee60405160405180910390a35050565b5f33905090565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680620006cc57607f821691505b602082108103620006e257620006e162000687565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620007467fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000709565b62000752868362000709565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6200079c6200079662000790846200076a565b62000773565b6200076a565b9050919050565b5f819050919050565b620007b7836200077c565b620007cf620007c682620007a3565b84845462000715565b825550505050565b5f90565b620007e5620007d7565b620007f2818484620007ac565b505050565b5b8181101562000819576200080d5f82620007db565b600181019050620007f8565b5050565b601f82111562000868576200083281620006e8565b6200083d84620006fa565b810160208510156200084d578190505b620008656200085c85620006fa565b830182620007f7565b50505b505050565b5f82821c905092915050565b5f6200088a5f19846008026200086d565b1980831691505092915050565b5f620008a4838362000879565b9150826002028217905092915050565b620008bf8262000650565b67ffffffffffffffff811115620008db57620008da6200065a565b5b620008e78254620006b4565b620008f48282856200081d565b5f60209050601f8311600181146200092a575f841562000915578287015190505b62000921858262000897565b86555062000990565b601f1984166200093a86620006e8565b5f5b8281101562000963578489015182556001820191506020850194506020810190506200093c565b868310156200098357848901516200097f601f89168262000879565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620009c38262000998565b9050919050565b620009d581620009b7565b82525050565b5f602082019050620009f05f830184620009ca565b92915050565b5f8115159050919050565b62000a0c81620009f6565b82525050565b5f60208201905062000a275f83018462000a01565b92915050565b612a9a8062000a3b5f395ff3fe6080604052600436106101d0575f3560e01c8063751039fc116100f6578063bfd7928411610094578063e800dff711610063578063e800dff71461063f578063e884f26014610667578063f2fde38b1461067d578063f5648a4f146106a5576101d7565b8063bfd7928414610575578063c0a904a2146105b1578063c876d0b9146105d9578063dd62ed3e14610603576101d7565b80638da5cb5b116100d05780638da5cb5b146104bd57806395d89b41146104e7578063a9059cbb14610511578063aea5e59d1461054d576101d7565b8063751039fc146104695780638366e79a1461047f5780638a8c523c146104a7576101d7565b8063313ce5671161016e5780635de998ef1161013d5780635de998ef146103c55780636ddd1713146103ed57806370a0823114610417578063715018a614610453576101d7565b8063313ce5671461031d5780634a62bb6514610347578063588b655f146103715780635db7548b1461039b576101d7565b8063130a2c3c116101aa578063130a2c3c1461026757806318160ddd1461028f5780632307b441146102b957806323b872dd146102e1576101d7565b806306fdde03146101d9578063072280c314610203578063095ea7b31461022b576101d7565b366101d757005b005b3480156101e4575f80fd5b506101ed6106bb565b6040516101fa91906121ae565b60405180910390f35b34801561020e575f80fd5b5061022960048036038101906102249190612265565b61074b565b005b348015610236575f80fd5b50610251600480360381019061024c91906122d6565b610856565b60405161025e9190612323565b60405180910390f35b348015610272575f80fd5b5061028d6004803603810190610288919061239d565b610878565b005b34801561029a575f80fd5b506102a3610921565b6040516102b09190612409565b60405180910390f35b3480156102c4575f80fd5b506102df60048036038101906102da9190612477565b61092a565b005b3480156102ec575f80fd5b50610307600480360381019061030291906124f5565b610a5c565b6040516103149190612323565b60405180910390f35b348015610328575f80fd5b50610331610a8a565b60405161033e9190612560565b60405180910390f35b348015610352575f80fd5b5061035b610a92565b6040516103689190612323565b60405180910390f35b34801561037c575f80fd5b50610385610aa5565b6040516103929190612409565b60405180910390f35b3480156103a6575f80fd5b506103af610aae565b6040516103bc9190612588565b60405180910390f35b3480156103d0575f80fd5b506103eb60048036038101906103e691906125a1565b610ad6565b005b3480156103f8575f80fd5b50610401610b21565b60405161040e9190612323565b60405180910390f35b348015610422575f80fd5b5061043d600480360381019061043891906125a1565b610b33565b60405161044a9190612409565b60405180910390f35b34801561045e575f80fd5b50610467610b79565b005b348015610474575f80fd5b5061047d610bcb565b005b34801561048a575f80fd5b506104a560048036038101906104a091906125cc565b610c34565b005b3480156104b2575f80fd5b506104bb610dcc565b005b3480156104c8575f80fd5b506104d1610e5e565b6040516104de9190612588565b60405180910390f35b3480156104f2575f80fd5b506104fb610e86565b60405161050891906121ae565b60405180910390f35b34801561051c575f80fd5b50610537600480360381019061053291906122d6565b610f16565b6040516105449190612323565b60405180910390f35b348015610558575f80fd5b50610573600480360381019061056e919061260a565b610f38565b005b348015610580575f80fd5b5061059b600480360381019061059691906125a1565b610ff7565b6040516105a89190612323565b60405180910390f35b3480156105bc575f80fd5b506105d760048036038101906105d29190612265565b611014565b005b3480156105e4575f80fd5b506105ed6110c2565b6040516105fa9190612323565b60405180910390f35b34801561060e575f80fd5b50610629600480360381019061062491906125cc565b6110d4565b6040516106369190612409565b60405180910390f35b34801561064a575f80fd5b5061066560048036038101906106609190612265565b611155565b005b348015610672575f80fd5b5061067b6111b5565b005b348015610688575f80fd5b506106a3600480360381019061069e91906125a1565b6111d8565b005b3480156106b0575f80fd5b506106b961125c565b005b6060600280546106ca90612662565b80601f01602080910402602001604051908101604052809291908181526020018280546106f690612662565b80156107415780601f1061071857610100808354040283529160200191610741565b820191905f5260205f20905b81548152906001019060200180831161072457829003601f168201915b5050505050905090565b610753611346565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107b8576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600e5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508015158273ffffffffffffffffffffffffffffffffffffffff167f15ec7ce7d0b7216e21edf93fa0a2e776016f033369f3b69f1074f5cff69769ee60405160405180910390a35050565b5f806108606113cd565b905061086d8185856113d4565b600191505092915050565b610880611346565b5f5b8383905081101561091b578160085f8686858181106108a4576108a3612692565b5b90506020020160208101906108b991906125a1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508080610913906126ec565b915050610882565b50505050565b5f600754905090565b3373ffffffffffffffffffffffffffffffffffffffff1660055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109b0576040517f16ad4feb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181905084849050146109ef576040517f77a93d8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8484905090505f604051602081016004356024355f5b86811015610a4057602460208202018083013581850135875260068652604087208181540181558189019850505050600181019050610a06565b50505050508060075f8282540192505081905550505050505050565b5f80610a666113cd565b9050610a738582856113e6565b610a7e858585611478565b60019150509392505050565b5f6012905090565b600960019054906101000a900460ff1681565b5f600d54905090565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ade611346565b8060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60095f9054906101000a900460ff1681565b5f60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610b81611346565b610b89611a2e565b5f60055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610bd3611346565b5f600960016101000a81548160ff0219169083151502179055505f600b5f6101000a81548160ff0219169083151502179055507fa4ffae85e880608d5d4365c2b682786545d136145537788e7e0940dff9f0b98c60405160405180910390a1565b610c3c611346565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ca1576040517fdad1a1b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d06576040517f74fc211300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d409190612588565b602060405180830381865afa158015610d5b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d7f9190612747565b9050610d8c838383611a41565b7f5661684995ab94d684bfe57a43c4141578f52d3e7374e8cd3250e2f062e13ac1838383604051610dbf93929190612772565b60405180910390a1505050565b610dd4611346565b600d545f14610e0f576040517fd723eaba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160095f6101000a81548160ff02191690831515021790555043600d819055507f1d97b7cdf6b6f3405cbe398b69512e5419a0ce78232b6e9c6ffbf1466774bd8d60405160405180910390a1565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060038054610e9590612662565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec190612662565b8015610f0c5780601f10610ee357610100808354040283529160200191610f0c565b820191905f5260205f20905b815481529060010190602001808311610eef57829003601f168201915b5050505050905090565b5f80610f206113cd565b9050610f2d818585611478565b600191505092915050565b610f40611346565b610f5e737b8a01b39d58278b5de7e48c8449c9f4f51706138261074b565b610f7c73b971ef87ede563556b2ed4b1c0b0019111dd85d28261074b565b610f9a7310ed43c718714eb63d5aa57b78b54704e256024e8261074b565b610fb8731b81d678ffb9c0263b24a97847620c99d213eb148261074b565b610fd67313f4ea83d0bd40e75c8222255bc855a974568dd48261074b565b610ff4731b02da8cb0d097eb8d57a175b88c7d8b479975068261074b565b50565b6008602052805f5260405f205f915054906101000a900460ff1681565b61101c611346565b80600c5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f4b89c347592b1d537e066cb4ed98d87696ae35164745d7e370e4add16941dc92826040516110b69190612323565b60405180910390a25050565b600b5f9054906101000a900460ff1681565b5f805f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b61115d611346565b8060085f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505050565b6111bd611346565b5f600b5f6101000a81548160ff021916908315150217905550565b6111e0611346565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611250575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016112479190612588565b60405180910390fd5b61125981611ac0565b50565b611264611346565b5f479050805f036112a1576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f3373ffffffffffffffffffffffffffffffffffffffff16826040516112c6906127d4565b5f6040518083038185875af1925050503d805f8114611300576040519150601f19603f3d011682016040523d82523d5f602084013e611305565b606091505b50508091505080611342576040517f3132169500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b61134e6113cd565b73ffffffffffffffffffffffffffffffffffffffff1661136c610e5e565b73ffffffffffffffffffffffffffffffffffffffff16146113cb5761138f6113cd565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016113c29190612588565b60405180910390fd5b565b5f33905090565b6113e18383836001611b83565b505050565b5f6113f184846110d4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146114725781811015611463578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161145a939291906127e8565b60405180910390fd5b61147184848484035f611b83565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114e857816040517fec442f050000000000000000000000000000000000000000000000000000000081526004016114df9190612588565b60405180910390fd5b5f811161152a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152190612867565b60405180910390fd5b611532611d51565b1580156115855750600e5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b1561166557600c5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16806116255750600c5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b611664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165b906128cf565b60405180910390fd5b5b60085f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1680611700575060085f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b15611736576040517e61c20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600960019054906101000a900460ff1615611a1e57611753610e5e565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156117c15750611791610e5e565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156117f957505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b801561184c5750600c5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b801561189f5750600c5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16155b15611a1d57600b5f9054906101000a900460ff1615611a1c576002436118c591906128ed565b600a5f3273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054108015611958575060024361191891906128ed565b600a5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054105b611997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198e90612990565b60405180910390fd5b43600a5f3273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555043600a5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b5b5b611a29838383611d5d565b505050565b611a36611346565b611a3f5f611ac0565b565b611abb838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401611a749291906129ae565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ee0565b505050565b5f60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611bf3575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401611bea9190612588565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611c63575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401611c5a9190612588565b60405180910390fd5b815f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611d4b578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611d429190612409565b60405180910390a35b50505050565b5f600d545f1415905090565b5f60065f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015611de7578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401611dde939291906127e8565b60405180910390fd5b81810360065f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508160065f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ed29190612409565b60405180910390a350505050565b5f611f0a828473ffffffffffffffffffffffffffffffffffffffff16611f7590919063ffffffff16565b90505f815114158015611f2e575080806020019051810190611f2c91906129e9565b155b15611f7057826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401611f679190612588565b60405180910390fd5b505050565b6060611f8283835f611f8a565b905092915050565b606081471015611fd157306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401611fc89190612588565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff168486604051611ff99190612a4e565b5f6040518083038185875af1925050503d805f8114612033576040519150601f19603f3d011682016040523d82523d5f602084013e612038565b606091505b5091509150612048868383612053565b925050509392505050565b60608261206857612063826120e0565b6120d8565b5f825114801561208e57505f8473ffffffffffffffffffffffffffffffffffffffff163b145b156120d057836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016120c79190612588565b60405180910390fd5b8190506120d9565b5b9392505050565b5f815111156120f25780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561215b578082015181840152602081019050612140565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61218082612124565b61218a818561212e565b935061219a81856020860161213e565b6121a381612166565b840191505092915050565b5f6020820190508181035f8301526121c68184612176565b905092915050565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6121ff826121d6565b9050919050565b61220f816121f5565b8114612219575f80fd5b50565b5f8135905061222a81612206565b92915050565b5f8115159050919050565b61224481612230565b811461224e575f80fd5b50565b5f8135905061225f8161223b565b92915050565b5f806040838503121561227b5761227a6121ce565b5b5f6122888582860161221c565b925050602061229985828601612251565b9150509250929050565b5f819050919050565b6122b5816122a3565b81146122bf575f80fd5b50565b5f813590506122d0816122ac565b92915050565b5f80604083850312156122ec576122eb6121ce565b5b5f6122f98582860161221c565b925050602061230a858286016122c2565b9150509250929050565b61231d81612230565b82525050565b5f6020820190506123365f830184612314565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261235d5761235c61233c565b5b8235905067ffffffffffffffff81111561237a57612379612340565b5b60208301915083602082028301111561239657612395612344565b5b9250929050565b5f805f604084860312156123b4576123b36121ce565b5b5f84013567ffffffffffffffff8111156123d1576123d06121d2565b5b6123dd86828701612348565b935093505060206123f086828701612251565b9150509250925092565b612403816122a3565b82525050565b5f60208201905061241c5f8301846123fa565b92915050565b5f8083601f8401126124375761243661233c565b5b8235905067ffffffffffffffff81111561245457612453612340565b5b6020830191508360208202830111156124705761246f612344565b5b9250929050565b5f805f806040858703121561248f5761248e6121ce565b5b5f85013567ffffffffffffffff8111156124ac576124ab6121d2565b5b6124b887828801612348565b9450945050602085013567ffffffffffffffff8111156124db576124da6121d2565b5b6124e787828801612422565b925092505092959194509250565b5f805f6060848603121561250c5761250b6121ce565b5b5f6125198682870161221c565b935050602061252a8682870161221c565b925050604061253b868287016122c2565b9150509250925092565b5f60ff82169050919050565b61255a81612545565b82525050565b5f6020820190506125735f830184612551565b92915050565b612582816121f5565b82525050565b5f60208201905061259b5f830184612579565b92915050565b5f602082840312156125b6576125b56121ce565b5b5f6125c38482850161221c565b91505092915050565b5f80604083850312156125e2576125e16121ce565b5b5f6125ef8582860161221c565b92505060206126008582860161221c565b9150509250929050565b5f6020828403121561261f5761261e6121ce565b5b5f61262c84828501612251565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061267957607f821691505b60208210810361268c5761268b612635565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6126f6826122a3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612728576127276126bf565b5b600182019050919050565b5f81519050612741816122ac565b92915050565b5f6020828403121561275c5761275b6121ce565b5b5f61276984828501612733565b91505092915050565b5f6060820190506127855f830186612579565b6127926020830185612579565b61279f60408301846123fa565b949350505050565b5f81905092915050565b50565b5f6127bf5f836127a7565b91506127ca826127b1565b5f82019050919050565b5f6127de826127b4565b9150819050919050565b5f6060820190506127fb5f830186612579565b61280860208301856123fa565b61281560408301846123fa565b949350505050565b7f616d6f756e74206d7573742062652067726561746572207468616e20300000005f82015250565b5f612851601d8361212e565b915061285c8261281d565b602082019050919050565b5f6020820190508181035f83015261287e81612845565b9050919050565b7f54726164696e67206973206e6f74206163746976652e000000000000000000005f82015250565b5f6128b960168361212e565b91506128c482612885565b602082019050919050565b5f6020820190508181035f8301526128e6816128ad565b9050919050565b5f6128f7826122a3565b9150612902836122a3565b925082820390508181111561291a576129196126bf565b5b92915050565b7f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c5f8201527f65642e202054727920616761696e206c617465722e0000000000000000000000602082015250565b5f61297a60358361212e565b915061298582612920565b604082019050919050565b5f6020820190508181035f8301526129a78161296e565b9050919050565b5f6040820190506129c15f830185612579565b6129ce60208301846123fa565b9392505050565b5f815190506129e38161223b565b92915050565b5f602082840312156129fe576129fd6121ce565b5b5f612a0b848285016129d5565b91505092915050565b5f81519050919050565b5f612a2882612a14565b612a3281856127a7565b9350612a4281856020860161213e565b80840191505092915050565b5f612a598284612a1e565b91508190509291505056fea26469706673582212205eed9e8486695921608f384e9712e8458ed0804f03c76cb647f64c5d3004090c64736f6c63430008140033",
}

// CoindistributionABI is the input ABI used to generate the binding from.
// Deprecated: Use CoindistributionMetaData.ABI instead.
var CoindistributionABI = CoindistributionMetaData.ABI

// CoindistributionBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CoindistributionMetaData.Bin instead.
var CoindistributionBin = CoindistributionMetaData.Bin

// DeployCoindistribution deploys a new Ethereum contract, binding an instance of Coindistribution to it.
func DeployCoindistribution(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Coindistribution, error) {
	parsed, err := CoindistributionMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CoindistributionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Coindistribution{CoindistributionCaller: CoindistributionCaller{contract: contract}, CoindistributionTransactor: CoindistributionTransactor{contract: contract}, CoindistributionFilterer: CoindistributionFilterer{contract: contract}}, nil
}

// Coindistribution is an auto generated Go binding around an Ethereum contract.
type Coindistribution struct {
	CoindistributionCaller     // Read-only binding to the contract
	CoindistributionTransactor // Write-only binding to the contract
	CoindistributionFilterer   // Log filterer for contract events
}

// CoindistributionCaller is an auto generated read-only Go binding around an Ethereum contract.
type CoindistributionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoindistributionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CoindistributionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoindistributionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CoindistributionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoindistributionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CoindistributionSession struct {
	Contract     *Coindistribution // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CoindistributionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CoindistributionCallerSession struct {
	Contract *CoindistributionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// CoindistributionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CoindistributionTransactorSession struct {
	Contract     *CoindistributionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CoindistributionRaw is an auto generated low-level Go binding around an Ethereum contract.
type CoindistributionRaw struct {
	Contract *Coindistribution // Generic contract binding to access the raw methods on
}

// CoindistributionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CoindistributionCallerRaw struct {
	Contract *CoindistributionCaller // Generic read-only contract binding to access the raw methods on
}

// CoindistributionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CoindistributionTransactorRaw struct {
	Contract *CoindistributionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCoindistribution creates a new instance of Coindistribution, bound to a specific deployed contract.
func NewCoindistribution(address common.Address, backend bind.ContractBackend) (*Coindistribution, error) {
	contract, err := bindCoindistribution(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Coindistribution{CoindistributionCaller: CoindistributionCaller{contract: contract}, CoindistributionTransactor: CoindistributionTransactor{contract: contract}, CoindistributionFilterer: CoindistributionFilterer{contract: contract}}, nil
}

// NewCoindistributionCaller creates a new read-only instance of Coindistribution, bound to a specific deployed contract.
func NewCoindistributionCaller(address common.Address, caller bind.ContractCaller) (*CoindistributionCaller, error) {
	contract, err := bindCoindistribution(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CoindistributionCaller{contract: contract}, nil
}

// NewCoindistributionTransactor creates a new write-only instance of Coindistribution, bound to a specific deployed contract.
func NewCoindistributionTransactor(address common.Address, transactor bind.ContractTransactor) (*CoindistributionTransactor, error) {
	contract, err := bindCoindistribution(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CoindistributionTransactor{contract: contract}, nil
}

// NewCoindistributionFilterer creates a new log filterer instance of Coindistribution, bound to a specific deployed contract.
func NewCoindistributionFilterer(address common.Address, filterer bind.ContractFilterer) (*CoindistributionFilterer, error) {
	contract, err := bindCoindistribution(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CoindistributionFilterer{contract: contract}, nil
}

// bindCoindistribution binds a generic wrapper to an already deployed contract.
func bindCoindistribution(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CoindistributionMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Coindistribution *CoindistributionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Coindistribution.Contract.CoindistributionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Coindistribution *CoindistributionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coindistribution.Contract.CoindistributionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Coindistribution *CoindistributionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Coindistribution.Contract.CoindistributionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Coindistribution *CoindistributionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Coindistribution.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Coindistribution *CoindistributionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coindistribution.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Coindistribution *CoindistributionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Coindistribution.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Coindistribution *CoindistributionCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Coindistribution *CoindistributionSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Coindistribution.Contract.Allowance(&_Coindistribution.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Coindistribution *CoindistributionCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Coindistribution.Contract.Allowance(&_Coindistribution.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Coindistribution *CoindistributionCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Coindistribution *CoindistributionSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Coindistribution.Contract.BalanceOf(&_Coindistribution.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Coindistribution *CoindistributionCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Coindistribution.Contract.BalanceOf(&_Coindistribution.CallOpts, account)
}

// Bots is a free data retrieval call binding the contract method 0xbfd79284.
//
// Solidity: function bots(address ) view returns(bool)
func (_Coindistribution *CoindistributionCaller) Bots(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "bots", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Bots is a free data retrieval call binding the contract method 0xbfd79284.
//
// Solidity: function bots(address ) view returns(bool)
func (_Coindistribution *CoindistributionSession) Bots(arg0 common.Address) (bool, error) {
	return _Coindistribution.Contract.Bots(&_Coindistribution.CallOpts, arg0)
}

// Bots is a free data retrieval call binding the contract method 0xbfd79284.
//
// Solidity: function bots(address ) view returns(bool)
func (_Coindistribution *CoindistributionCallerSession) Bots(arg0 common.Address) (bool, error) {
	return _Coindistribution.Contract.Bots(&_Coindistribution.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Coindistribution *CoindistributionCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Coindistribution *CoindistributionSession) Decimals() (uint8, error) {
	return _Coindistribution.Contract.Decimals(&_Coindistribution.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Coindistribution *CoindistributionCallerSession) Decimals() (uint8, error) {
	return _Coindistribution.Contract.Decimals(&_Coindistribution.CallOpts)
}

// GetAirDropper is a free data retrieval call binding the contract method 0x5db7548b.
//
// Solidity: function getAirDropper() view returns(address)
func (_Coindistribution *CoindistributionCaller) GetAirDropper(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "getAirDropper")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAirDropper is a free data retrieval call binding the contract method 0x5db7548b.
//
// Solidity: function getAirDropper() view returns(address)
func (_Coindistribution *CoindistributionSession) GetAirDropper() (common.Address, error) {
	return _Coindistribution.Contract.GetAirDropper(&_Coindistribution.CallOpts)
}

// GetAirDropper is a free data retrieval call binding the contract method 0x5db7548b.
//
// Solidity: function getAirDropper() view returns(address)
func (_Coindistribution *CoindistributionCallerSession) GetAirDropper() (common.Address, error) {
	return _Coindistribution.Contract.GetAirDropper(&_Coindistribution.CallOpts)
}

// GetTradingEnabledBlock is a free data retrieval call binding the contract method 0x588b655f.
//
// Solidity: function getTradingEnabledBlock() view returns(uint256)
func (_Coindistribution *CoindistributionCaller) GetTradingEnabledBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "getTradingEnabledBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTradingEnabledBlock is a free data retrieval call binding the contract method 0x588b655f.
//
// Solidity: function getTradingEnabledBlock() view returns(uint256)
func (_Coindistribution *CoindistributionSession) GetTradingEnabledBlock() (*big.Int, error) {
	return _Coindistribution.Contract.GetTradingEnabledBlock(&_Coindistribution.CallOpts)
}

// GetTradingEnabledBlock is a free data retrieval call binding the contract method 0x588b655f.
//
// Solidity: function getTradingEnabledBlock() view returns(uint256)
func (_Coindistribution *CoindistributionCallerSession) GetTradingEnabledBlock() (*big.Int, error) {
	return _Coindistribution.Contract.GetTradingEnabledBlock(&_Coindistribution.CallOpts)
}

// LimitsInEffect is a free data retrieval call binding the contract method 0x4a62bb65.
//
// Solidity: function limitsInEffect() view returns(bool)
func (_Coindistribution *CoindistributionCaller) LimitsInEffect(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "limitsInEffect")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// LimitsInEffect is a free data retrieval call binding the contract method 0x4a62bb65.
//
// Solidity: function limitsInEffect() view returns(bool)
func (_Coindistribution *CoindistributionSession) LimitsInEffect() (bool, error) {
	return _Coindistribution.Contract.LimitsInEffect(&_Coindistribution.CallOpts)
}

// LimitsInEffect is a free data retrieval call binding the contract method 0x4a62bb65.
//
// Solidity: function limitsInEffect() view returns(bool)
func (_Coindistribution *CoindistributionCallerSession) LimitsInEffect() (bool, error) {
	return _Coindistribution.Contract.LimitsInEffect(&_Coindistribution.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Coindistribution *CoindistributionCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Coindistribution *CoindistributionSession) Name() (string, error) {
	return _Coindistribution.Contract.Name(&_Coindistribution.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Coindistribution *CoindistributionCallerSession) Name() (string, error) {
	return _Coindistribution.Contract.Name(&_Coindistribution.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Coindistribution *CoindistributionCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Coindistribution *CoindistributionSession) Owner() (common.Address, error) {
	return _Coindistribution.Contract.Owner(&_Coindistribution.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Coindistribution *CoindistributionCallerSession) Owner() (common.Address, error) {
	return _Coindistribution.Contract.Owner(&_Coindistribution.CallOpts)
}

// SwapEnabled is a free data retrieval call binding the contract method 0x6ddd1713.
//
// Solidity: function swapEnabled() view returns(bool)
func (_Coindistribution *CoindistributionCaller) SwapEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "swapEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SwapEnabled is a free data retrieval call binding the contract method 0x6ddd1713.
//
// Solidity: function swapEnabled() view returns(bool)
func (_Coindistribution *CoindistributionSession) SwapEnabled() (bool, error) {
	return _Coindistribution.Contract.SwapEnabled(&_Coindistribution.CallOpts)
}

// SwapEnabled is a free data retrieval call binding the contract method 0x6ddd1713.
//
// Solidity: function swapEnabled() view returns(bool)
func (_Coindistribution *CoindistributionCallerSession) SwapEnabled() (bool, error) {
	return _Coindistribution.Contract.SwapEnabled(&_Coindistribution.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Coindistribution *CoindistributionCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Coindistribution *CoindistributionSession) Symbol() (string, error) {
	return _Coindistribution.Contract.Symbol(&_Coindistribution.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Coindistribution *CoindistributionCallerSession) Symbol() (string, error) {
	return _Coindistribution.Contract.Symbol(&_Coindistribution.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Coindistribution *CoindistributionCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Coindistribution *CoindistributionSession) TotalSupply() (*big.Int, error) {
	return _Coindistribution.Contract.TotalSupply(&_Coindistribution.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Coindistribution *CoindistributionCallerSession) TotalSupply() (*big.Int, error) {
	return _Coindistribution.Contract.TotalSupply(&_Coindistribution.CallOpts)
}

// TransferDelayEnabled is a free data retrieval call binding the contract method 0xc876d0b9.
//
// Solidity: function transferDelayEnabled() view returns(bool)
func (_Coindistribution *CoindistributionCaller) TransferDelayEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Coindistribution.contract.Call(opts, &out, "transferDelayEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TransferDelayEnabled is a free data retrieval call binding the contract method 0xc876d0b9.
//
// Solidity: function transferDelayEnabled() view returns(bool)
func (_Coindistribution *CoindistributionSession) TransferDelayEnabled() (bool, error) {
	return _Coindistribution.Contract.TransferDelayEnabled(&_Coindistribution.CallOpts)
}

// TransferDelayEnabled is a free data retrieval call binding the contract method 0xc876d0b9.
//
// Solidity: function transferDelayEnabled() view returns(bool)
func (_Coindistribution *CoindistributionCallerSession) TransferDelayEnabled() (bool, error) {
	return _Coindistribution.Contract.TransferDelayEnabled(&_Coindistribution.CallOpts)
}

// AirdropToWallets is a paid mutator transaction binding the contract method 0x2307b441.
//
// Solidity: function airdropToWallets(address[] recipients, uint256[] amounts) returns()
func (_Coindistribution *CoindistributionTransactor) AirdropToWallets(opts *bind.TransactOpts, recipients []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "airdropToWallets", recipients, amounts)
}

// AirdropToWallets is a paid mutator transaction binding the contract method 0x2307b441.
//
// Solidity: function airdropToWallets(address[] recipients, uint256[] amounts) returns()
func (_Coindistribution *CoindistributionSession) AirdropToWallets(recipients []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Coindistribution.Contract.AirdropToWallets(&_Coindistribution.TransactOpts, recipients, amounts)
}

// AirdropToWallets is a paid mutator transaction binding the contract method 0x2307b441.
//
// Solidity: function airdropToWallets(address[] recipients, uint256[] amounts) returns()
func (_Coindistribution *CoindistributionTransactorSession) AirdropToWallets(recipients []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Coindistribution.Contract.AirdropToWallets(&_Coindistribution.TransactOpts, recipients, amounts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_Coindistribution *CoindistributionTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_Coindistribution *CoindistributionSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _Coindistribution.Contract.Approve(&_Coindistribution.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_Coindistribution *CoindistributionTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _Coindistribution.Contract.Approve(&_Coindistribution.TransactOpts, spender, value)
}

// DisableTransferDelay is a paid mutator transaction binding the contract method 0xe884f260.
//
// Solidity: function disableTransferDelay() returns()
func (_Coindistribution *CoindistributionTransactor) DisableTransferDelay(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "disableTransferDelay")
}

// DisableTransferDelay is a paid mutator transaction binding the contract method 0xe884f260.
//
// Solidity: function disableTransferDelay() returns()
func (_Coindistribution *CoindistributionSession) DisableTransferDelay() (*types.Transaction, error) {
	return _Coindistribution.Contract.DisableTransferDelay(&_Coindistribution.TransactOpts)
}

// DisableTransferDelay is a paid mutator transaction binding the contract method 0xe884f260.
//
// Solidity: function disableTransferDelay() returns()
func (_Coindistribution *CoindistributionTransactorSession) DisableTransferDelay() (*types.Transaction, error) {
	return _Coindistribution.Contract.DisableTransferDelay(&_Coindistribution.TransactOpts)
}

// EnableTrading is a paid mutator transaction binding the contract method 0x8a8c523c.
//
// Solidity: function enableTrading() returns()
func (_Coindistribution *CoindistributionTransactor) EnableTrading(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "enableTrading")
}

// EnableTrading is a paid mutator transaction binding the contract method 0x8a8c523c.
//
// Solidity: function enableTrading() returns()
func (_Coindistribution *CoindistributionSession) EnableTrading() (*types.Transaction, error) {
	return _Coindistribution.Contract.EnableTrading(&_Coindistribution.TransactOpts)
}

// EnableTrading is a paid mutator transaction binding the contract method 0x8a8c523c.
//
// Solidity: function enableTrading() returns()
func (_Coindistribution *CoindistributionTransactorSession) EnableTrading() (*types.Transaction, error) {
	return _Coindistribution.Contract.EnableTrading(&_Coindistribution.TransactOpts)
}

// ExcludeFromLimits is a paid mutator transaction binding the contract method 0xc0a904a2.
//
// Solidity: function excludeFromLimits(address account, bool excluded) returns()
func (_Coindistribution *CoindistributionTransactor) ExcludeFromLimits(opts *bind.TransactOpts, account common.Address, excluded bool) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "excludeFromLimits", account, excluded)
}

// ExcludeFromLimits is a paid mutator transaction binding the contract method 0xc0a904a2.
//
// Solidity: function excludeFromLimits(address account, bool excluded) returns()
func (_Coindistribution *CoindistributionSession) ExcludeFromLimits(account common.Address, excluded bool) (*types.Transaction, error) {
	return _Coindistribution.Contract.ExcludeFromLimits(&_Coindistribution.TransactOpts, account, excluded)
}

// ExcludeFromLimits is a paid mutator transaction binding the contract method 0xc0a904a2.
//
// Solidity: function excludeFromLimits(address account, bool excluded) returns()
func (_Coindistribution *CoindistributionTransactorSession) ExcludeFromLimits(account common.Address, excluded bool) (*types.Transaction, error) {
	return _Coindistribution.Contract.ExcludeFromLimits(&_Coindistribution.TransactOpts, account, excluded)
}

// ManageBoughtEarly is a paid mutator transaction binding the contract method 0xe800dff7.
//
// Solidity: function manageBoughtEarly(address wallet, bool flag) returns()
func (_Coindistribution *CoindistributionTransactor) ManageBoughtEarly(opts *bind.TransactOpts, wallet common.Address, flag bool) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "manageBoughtEarly", wallet, flag)
}

// ManageBoughtEarly is a paid mutator transaction binding the contract method 0xe800dff7.
//
// Solidity: function manageBoughtEarly(address wallet, bool flag) returns()
func (_Coindistribution *CoindistributionSession) ManageBoughtEarly(wallet common.Address, flag bool) (*types.Transaction, error) {
	return _Coindistribution.Contract.ManageBoughtEarly(&_Coindistribution.TransactOpts, wallet, flag)
}

// ManageBoughtEarly is a paid mutator transaction binding the contract method 0xe800dff7.
//
// Solidity: function manageBoughtEarly(address wallet, bool flag) returns()
func (_Coindistribution *CoindistributionTransactorSession) ManageBoughtEarly(wallet common.Address, flag bool) (*types.Transaction, error) {
	return _Coindistribution.Contract.ManageBoughtEarly(&_Coindistribution.TransactOpts, wallet, flag)
}

// MassManageBoughtEarly is a paid mutator transaction binding the contract method 0x130a2c3c.
//
// Solidity: function massManageBoughtEarly(address[] wallets, bool flag) returns()
func (_Coindistribution *CoindistributionTransactor) MassManageBoughtEarly(opts *bind.TransactOpts, wallets []common.Address, flag bool) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "massManageBoughtEarly", wallets, flag)
}

// MassManageBoughtEarly is a paid mutator transaction binding the contract method 0x130a2c3c.
//
// Solidity: function massManageBoughtEarly(address[] wallets, bool flag) returns()
func (_Coindistribution *CoindistributionSession) MassManageBoughtEarly(wallets []common.Address, flag bool) (*types.Transaction, error) {
	return _Coindistribution.Contract.MassManageBoughtEarly(&_Coindistribution.TransactOpts, wallets, flag)
}

// MassManageBoughtEarly is a paid mutator transaction binding the contract method 0x130a2c3c.
//
// Solidity: function massManageBoughtEarly(address[] wallets, bool flag) returns()
func (_Coindistribution *CoindistributionTransactorSession) MassManageBoughtEarly(wallets []common.Address, flag bool) (*types.Transaction, error) {
	return _Coindistribution.Contract.MassManageBoughtEarly(&_Coindistribution.TransactOpts, wallets, flag)
}

// RemoveLimits is a paid mutator transaction binding the contract method 0x751039fc.
//
// Solidity: function removeLimits() returns()
func (_Coindistribution *CoindistributionTransactor) RemoveLimits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "removeLimits")
}

// RemoveLimits is a paid mutator transaction binding the contract method 0x751039fc.
//
// Solidity: function removeLimits() returns()
func (_Coindistribution *CoindistributionSession) RemoveLimits() (*types.Transaction, error) {
	return _Coindistribution.Contract.RemoveLimits(&_Coindistribution.TransactOpts)
}

// RemoveLimits is a paid mutator transaction binding the contract method 0x751039fc.
//
// Solidity: function removeLimits() returns()
func (_Coindistribution *CoindistributionTransactorSession) RemoveLimits() (*types.Transaction, error) {
	return _Coindistribution.Contract.RemoveLimits(&_Coindistribution.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Coindistribution *CoindistributionTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Coindistribution *CoindistributionSession) RenounceOwnership() (*types.Transaction, error) {
	return _Coindistribution.Contract.RenounceOwnership(&_Coindistribution.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Coindistribution *CoindistributionTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Coindistribution.Contract.RenounceOwnership(&_Coindistribution.TransactOpts)
}

// SetAirDropper is a paid mutator transaction binding the contract method 0x5de998ef.
//
// Solidity: function setAirDropper(address newAirDropper) returns()
func (_Coindistribution *CoindistributionTransactor) SetAirDropper(opts *bind.TransactOpts, newAirDropper common.Address) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "setAirDropper", newAirDropper)
}

// SetAirDropper is a paid mutator transaction binding the contract method 0x5de998ef.
//
// Solidity: function setAirDropper(address newAirDropper) returns()
func (_Coindistribution *CoindistributionSession) SetAirDropper(newAirDropper common.Address) (*types.Transaction, error) {
	return _Coindistribution.Contract.SetAirDropper(&_Coindistribution.TransactOpts, newAirDropper)
}

// SetAirDropper is a paid mutator transaction binding the contract method 0x5de998ef.
//
// Solidity: function setAirDropper(address newAirDropper) returns()
func (_Coindistribution *CoindistributionTransactorSession) SetAirDropper(newAirDropper common.Address) (*types.Transaction, error) {
	return _Coindistribution.Contract.SetAirDropper(&_Coindistribution.TransactOpts, newAirDropper)
}

// SetKnownBNBUniswapRouters is a paid mutator transaction binding the contract method 0xaea5e59d.
//
// Solidity: function setKnownBNBUniswapRouters(bool flag) returns()
func (_Coindistribution *CoindistributionTransactor) SetKnownBNBUniswapRouters(opts *bind.TransactOpts, flag bool) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "setKnownBNBUniswapRouters", flag)
}

// SetKnownBNBUniswapRouters is a paid mutator transaction binding the contract method 0xaea5e59d.
//
// Solidity: function setKnownBNBUniswapRouters(bool flag) returns()
func (_Coindistribution *CoindistributionSession) SetKnownBNBUniswapRouters(flag bool) (*types.Transaction, error) {
	return _Coindistribution.Contract.SetKnownBNBUniswapRouters(&_Coindistribution.TransactOpts, flag)
}

// SetKnownBNBUniswapRouters is a paid mutator transaction binding the contract method 0xaea5e59d.
//
// Solidity: function setKnownBNBUniswapRouters(bool flag) returns()
func (_Coindistribution *CoindistributionTransactorSession) SetKnownBNBUniswapRouters(flag bool) (*types.Transaction, error) {
	return _Coindistribution.Contract.SetKnownBNBUniswapRouters(&_Coindistribution.TransactOpts, flag)
}

// SetUniswapRouter is a paid mutator transaction binding the contract method 0x072280c3.
//
// Solidity: function setUniswapRouter(address theAddress, bool flag) returns()
func (_Coindistribution *CoindistributionTransactor) SetUniswapRouter(opts *bind.TransactOpts, theAddress common.Address, flag bool) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "setUniswapRouter", theAddress, flag)
}

// SetUniswapRouter is a paid mutator transaction binding the contract method 0x072280c3.
//
// Solidity: function setUniswapRouter(address theAddress, bool flag) returns()
func (_Coindistribution *CoindistributionSession) SetUniswapRouter(theAddress common.Address, flag bool) (*types.Transaction, error) {
	return _Coindistribution.Contract.SetUniswapRouter(&_Coindistribution.TransactOpts, theAddress, flag)
}

// SetUniswapRouter is a paid mutator transaction binding the contract method 0x072280c3.
//
// Solidity: function setUniswapRouter(address theAddress, bool flag) returns()
func (_Coindistribution *CoindistributionTransactorSession) SetUniswapRouter(theAddress common.Address, flag bool) (*types.Transaction, error) {
	return _Coindistribution.Contract.SetUniswapRouter(&_Coindistribution.TransactOpts, theAddress, flag)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_Coindistribution *CoindistributionTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_Coindistribution *CoindistributionSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Coindistribution.Contract.Transfer(&_Coindistribution.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_Coindistribution *CoindistributionTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Coindistribution.Contract.Transfer(&_Coindistribution.TransactOpts, to, value)
}

// TransferForeignToken is a paid mutator transaction binding the contract method 0x8366e79a.
//
// Solidity: function transferForeignToken(address _token, address _to) returns()
func (_Coindistribution *CoindistributionTransactor) TransferForeignToken(opts *bind.TransactOpts, _token common.Address, _to common.Address) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "transferForeignToken", _token, _to)
}

// TransferForeignToken is a paid mutator transaction binding the contract method 0x8366e79a.
//
// Solidity: function transferForeignToken(address _token, address _to) returns()
func (_Coindistribution *CoindistributionSession) TransferForeignToken(_token common.Address, _to common.Address) (*types.Transaction, error) {
	return _Coindistribution.Contract.TransferForeignToken(&_Coindistribution.TransactOpts, _token, _to)
}

// TransferForeignToken is a paid mutator transaction binding the contract method 0x8366e79a.
//
// Solidity: function transferForeignToken(address _token, address _to) returns()
func (_Coindistribution *CoindistributionTransactorSession) TransferForeignToken(_token common.Address, _to common.Address) (*types.Transaction, error) {
	return _Coindistribution.Contract.TransferForeignToken(&_Coindistribution.TransactOpts, _token, _to)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_Coindistribution *CoindistributionTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_Coindistribution *CoindistributionSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Coindistribution.Contract.TransferFrom(&_Coindistribution.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_Coindistribution *CoindistributionTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Coindistribution.Contract.TransferFrom(&_Coindistribution.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Coindistribution *CoindistributionTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Coindistribution *CoindistributionSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Coindistribution.Contract.TransferOwnership(&_Coindistribution.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Coindistribution *CoindistributionTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Coindistribution.Contract.TransferOwnership(&_Coindistribution.TransactOpts, newOwner)
}

// WithdrawStuckETH is a paid mutator transaction binding the contract method 0xf5648a4f.
//
// Solidity: function withdrawStuckETH() returns()
func (_Coindistribution *CoindistributionTransactor) WithdrawStuckETH(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coindistribution.contract.Transact(opts, "withdrawStuckETH")
}

// WithdrawStuckETH is a paid mutator transaction binding the contract method 0xf5648a4f.
//
// Solidity: function withdrawStuckETH() returns()
func (_Coindistribution *CoindistributionSession) WithdrawStuckETH() (*types.Transaction, error) {
	return _Coindistribution.Contract.WithdrawStuckETH(&_Coindistribution.TransactOpts)
}

// WithdrawStuckETH is a paid mutator transaction binding the contract method 0xf5648a4f.
//
// Solidity: function withdrawStuckETH() returns()
func (_Coindistribution *CoindistributionTransactorSession) WithdrawStuckETH() (*types.Transaction, error) {
	return _Coindistribution.Contract.WithdrawStuckETH(&_Coindistribution.TransactOpts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Coindistribution *CoindistributionTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Coindistribution.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Coindistribution *CoindistributionSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Coindistribution.Contract.Fallback(&_Coindistribution.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Coindistribution *CoindistributionTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Coindistribution.Contract.Fallback(&_Coindistribution.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Coindistribution *CoindistributionTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coindistribution.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Coindistribution *CoindistributionSession) Receive() (*types.Transaction, error) {
	return _Coindistribution.Contract.Receive(&_Coindistribution.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Coindistribution *CoindistributionTransactorSession) Receive() (*types.Transaction, error) {
	return _Coindistribution.Contract.Receive(&_Coindistribution.TransactOpts)
}

// CoindistributionApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Coindistribution contract.
type CoindistributionApprovalIterator struct {
	Event *CoindistributionApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoindistributionApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoindistributionApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoindistributionApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoindistributionApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoindistributionApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoindistributionApproval represents a Approval event raised by the Coindistribution contract.
type CoindistributionApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Coindistribution *CoindistributionFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*CoindistributionApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Coindistribution.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &CoindistributionApprovalIterator{contract: _Coindistribution.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Coindistribution *CoindistributionFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CoindistributionApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Coindistribution.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoindistributionApproval)
				if err := _Coindistribution.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Coindistribution *CoindistributionFilterer) ParseApproval(log types.Log) (*CoindistributionApproval, error) {
	event := new(CoindistributionApproval)
	if err := _Coindistribution.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoindistributionEnableTradingIterator is returned from FilterEnableTrading and is used to iterate over the raw logs and unpacked data for EnableTrading events raised by the Coindistribution contract.
type CoindistributionEnableTradingIterator struct {
	Event *CoindistributionEnableTrading // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoindistributionEnableTradingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoindistributionEnableTrading)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoindistributionEnableTrading)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoindistributionEnableTradingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoindistributionEnableTradingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoindistributionEnableTrading represents a EnableTrading event raised by the Coindistribution contract.
type CoindistributionEnableTrading struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEnableTrading is a free log retrieval operation binding the contract event 0x1d97b7cdf6b6f3405cbe398b69512e5419a0ce78232b6e9c6ffbf1466774bd8d.
//
// Solidity: event EnableTrading()
func (_Coindistribution *CoindistributionFilterer) FilterEnableTrading(opts *bind.FilterOpts) (*CoindistributionEnableTradingIterator, error) {

	logs, sub, err := _Coindistribution.contract.FilterLogs(opts, "EnableTrading")
	if err != nil {
		return nil, err
	}
	return &CoindistributionEnableTradingIterator{contract: _Coindistribution.contract, event: "EnableTrading", logs: logs, sub: sub}, nil
}

// WatchEnableTrading is a free log subscription operation binding the contract event 0x1d97b7cdf6b6f3405cbe398b69512e5419a0ce78232b6e9c6ffbf1466774bd8d.
//
// Solidity: event EnableTrading()
func (_Coindistribution *CoindistributionFilterer) WatchEnableTrading(opts *bind.WatchOpts, sink chan<- *CoindistributionEnableTrading) (event.Subscription, error) {

	logs, sub, err := _Coindistribution.contract.WatchLogs(opts, "EnableTrading")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoindistributionEnableTrading)
				if err := _Coindistribution.contract.UnpackLog(event, "EnableTrading", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnableTrading is a log parse operation binding the contract event 0x1d97b7cdf6b6f3405cbe398b69512e5419a0ce78232b6e9c6ffbf1466774bd8d.
//
// Solidity: event EnableTrading()
func (_Coindistribution *CoindistributionFilterer) ParseEnableTrading(log types.Log) (*CoindistributionEnableTrading, error) {
	event := new(CoindistributionEnableTrading)
	if err := _Coindistribution.contract.UnpackLog(event, "EnableTrading", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoindistributionExcludeFromLimitsIterator is returned from FilterExcludeFromLimits and is used to iterate over the raw logs and unpacked data for ExcludeFromLimits events raised by the Coindistribution contract.
type CoindistributionExcludeFromLimitsIterator struct {
	Event *CoindistributionExcludeFromLimits // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoindistributionExcludeFromLimitsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoindistributionExcludeFromLimits)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoindistributionExcludeFromLimits)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoindistributionExcludeFromLimitsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoindistributionExcludeFromLimitsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoindistributionExcludeFromLimits represents a ExcludeFromLimits event raised by the Coindistribution contract.
type CoindistributionExcludeFromLimits struct {
	Account    common.Address
	IsExcluded bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExcludeFromLimits is a free log retrieval operation binding the contract event 0x4b89c347592b1d537e066cb4ed98d87696ae35164745d7e370e4add16941dc92.
//
// Solidity: event ExcludeFromLimits(address indexed account, bool isExcluded)
func (_Coindistribution *CoindistributionFilterer) FilterExcludeFromLimits(opts *bind.FilterOpts, account []common.Address) (*CoindistributionExcludeFromLimitsIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Coindistribution.contract.FilterLogs(opts, "ExcludeFromLimits", accountRule)
	if err != nil {
		return nil, err
	}
	return &CoindistributionExcludeFromLimitsIterator{contract: _Coindistribution.contract, event: "ExcludeFromLimits", logs: logs, sub: sub}, nil
}

// WatchExcludeFromLimits is a free log subscription operation binding the contract event 0x4b89c347592b1d537e066cb4ed98d87696ae35164745d7e370e4add16941dc92.
//
// Solidity: event ExcludeFromLimits(address indexed account, bool isExcluded)
func (_Coindistribution *CoindistributionFilterer) WatchExcludeFromLimits(opts *bind.WatchOpts, sink chan<- *CoindistributionExcludeFromLimits, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Coindistribution.contract.WatchLogs(opts, "ExcludeFromLimits", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoindistributionExcludeFromLimits)
				if err := _Coindistribution.contract.UnpackLog(event, "ExcludeFromLimits", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExcludeFromLimits is a log parse operation binding the contract event 0x4b89c347592b1d537e066cb4ed98d87696ae35164745d7e370e4add16941dc92.
//
// Solidity: event ExcludeFromLimits(address indexed account, bool isExcluded)
func (_Coindistribution *CoindistributionFilterer) ParseExcludeFromLimits(log types.Log) (*CoindistributionExcludeFromLimits, error) {
	event := new(CoindistributionExcludeFromLimits)
	if err := _Coindistribution.contract.UnpackLog(event, "ExcludeFromLimits", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoindistributionOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Coindistribution contract.
type CoindistributionOwnershipTransferredIterator struct {
	Event *CoindistributionOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoindistributionOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoindistributionOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoindistributionOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoindistributionOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoindistributionOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoindistributionOwnershipTransferred represents a OwnershipTransferred event raised by the Coindistribution contract.
type CoindistributionOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Coindistribution *CoindistributionFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CoindistributionOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Coindistribution.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CoindistributionOwnershipTransferredIterator{contract: _Coindistribution.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Coindistribution *CoindistributionFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CoindistributionOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Coindistribution.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoindistributionOwnershipTransferred)
				if err := _Coindistribution.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Coindistribution *CoindistributionFilterer) ParseOwnershipTransferred(log types.Log) (*CoindistributionOwnershipTransferred, error) {
	event := new(CoindistributionOwnershipTransferred)
	if err := _Coindistribution.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoindistributionRemovedLimitsIterator is returned from FilterRemovedLimits and is used to iterate over the raw logs and unpacked data for RemovedLimits events raised by the Coindistribution contract.
type CoindistributionRemovedLimitsIterator struct {
	Event *CoindistributionRemovedLimits // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoindistributionRemovedLimitsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoindistributionRemovedLimits)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoindistributionRemovedLimits)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoindistributionRemovedLimitsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoindistributionRemovedLimitsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoindistributionRemovedLimits represents a RemovedLimits event raised by the Coindistribution contract.
type CoindistributionRemovedLimits struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRemovedLimits is a free log retrieval operation binding the contract event 0xa4ffae85e880608d5d4365c2b682786545d136145537788e7e0940dff9f0b98c.
//
// Solidity: event RemovedLimits()
func (_Coindistribution *CoindistributionFilterer) FilterRemovedLimits(opts *bind.FilterOpts) (*CoindistributionRemovedLimitsIterator, error) {

	logs, sub, err := _Coindistribution.contract.FilterLogs(opts, "RemovedLimits")
	if err != nil {
		return nil, err
	}
	return &CoindistributionRemovedLimitsIterator{contract: _Coindistribution.contract, event: "RemovedLimits", logs: logs, sub: sub}, nil
}

// WatchRemovedLimits is a free log subscription operation binding the contract event 0xa4ffae85e880608d5d4365c2b682786545d136145537788e7e0940dff9f0b98c.
//
// Solidity: event RemovedLimits()
func (_Coindistribution *CoindistributionFilterer) WatchRemovedLimits(opts *bind.WatchOpts, sink chan<- *CoindistributionRemovedLimits) (event.Subscription, error) {

	logs, sub, err := _Coindistribution.contract.WatchLogs(opts, "RemovedLimits")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoindistributionRemovedLimits)
				if err := _Coindistribution.contract.UnpackLog(event, "RemovedLimits", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemovedLimits is a log parse operation binding the contract event 0xa4ffae85e880608d5d4365c2b682786545d136145537788e7e0940dff9f0b98c.
//
// Solidity: event RemovedLimits()
func (_Coindistribution *CoindistributionFilterer) ParseRemovedLimits(log types.Log) (*CoindistributionRemovedLimits, error) {
	event := new(CoindistributionRemovedLimits)
	if err := _Coindistribution.contract.UnpackLog(event, "RemovedLimits", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoindistributionSetUniswapRouterIterator is returned from FilterSetUniswapRouter and is used to iterate over the raw logs and unpacked data for SetUniswapRouter events raised by the Coindistribution contract.
type CoindistributionSetUniswapRouterIterator struct {
	Event *CoindistributionSetUniswapRouter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoindistributionSetUniswapRouterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoindistributionSetUniswapRouter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoindistributionSetUniswapRouter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoindistributionSetUniswapRouterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoindistributionSetUniswapRouterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoindistributionSetUniswapRouter represents a SetUniswapRouter event raised by the Coindistribution contract.
type CoindistributionSetUniswapRouter struct {
	TheAddress common.Address
	Flag       bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetUniswapRouter is a free log retrieval operation binding the contract event 0x15ec7ce7d0b7216e21edf93fa0a2e776016f033369f3b69f1074f5cff69769ee.
//
// Solidity: event SetUniswapRouter(address indexed theAddress, bool indexed flag)
func (_Coindistribution *CoindistributionFilterer) FilterSetUniswapRouter(opts *bind.FilterOpts, theAddress []common.Address, flag []bool) (*CoindistributionSetUniswapRouterIterator, error) {

	var theAddressRule []interface{}
	for _, theAddressItem := range theAddress {
		theAddressRule = append(theAddressRule, theAddressItem)
	}
	var flagRule []interface{}
	for _, flagItem := range flag {
		flagRule = append(flagRule, flagItem)
	}

	logs, sub, err := _Coindistribution.contract.FilterLogs(opts, "SetUniswapRouter", theAddressRule, flagRule)
	if err != nil {
		return nil, err
	}
	return &CoindistributionSetUniswapRouterIterator{contract: _Coindistribution.contract, event: "SetUniswapRouter", logs: logs, sub: sub}, nil
}

// WatchSetUniswapRouter is a free log subscription operation binding the contract event 0x15ec7ce7d0b7216e21edf93fa0a2e776016f033369f3b69f1074f5cff69769ee.
//
// Solidity: event SetUniswapRouter(address indexed theAddress, bool indexed flag)
func (_Coindistribution *CoindistributionFilterer) WatchSetUniswapRouter(opts *bind.WatchOpts, sink chan<- *CoindistributionSetUniswapRouter, theAddress []common.Address, flag []bool) (event.Subscription, error) {

	var theAddressRule []interface{}
	for _, theAddressItem := range theAddress {
		theAddressRule = append(theAddressRule, theAddressItem)
	}
	var flagRule []interface{}
	for _, flagItem := range flag {
		flagRule = append(flagRule, flagItem)
	}

	logs, sub, err := _Coindistribution.contract.WatchLogs(opts, "SetUniswapRouter", theAddressRule, flagRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoindistributionSetUniswapRouter)
				if err := _Coindistribution.contract.UnpackLog(event, "SetUniswapRouter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUniswapRouter is a log parse operation binding the contract event 0x15ec7ce7d0b7216e21edf93fa0a2e776016f033369f3b69f1074f5cff69769ee.
//
// Solidity: event SetUniswapRouter(address indexed theAddress, bool indexed flag)
func (_Coindistribution *CoindistributionFilterer) ParseSetUniswapRouter(log types.Log) (*CoindistributionSetUniswapRouter, error) {
	event := new(CoindistributionSetUniswapRouter)
	if err := _Coindistribution.contract.UnpackLog(event, "SetUniswapRouter", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoindistributionTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Coindistribution contract.
type CoindistributionTransferIterator struct {
	Event *CoindistributionTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoindistributionTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoindistributionTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoindistributionTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoindistributionTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoindistributionTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoindistributionTransfer represents a Transfer event raised by the Coindistribution contract.
type CoindistributionTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Coindistribution *CoindistributionFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CoindistributionTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Coindistribution.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CoindistributionTransferIterator{contract: _Coindistribution.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Coindistribution *CoindistributionFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CoindistributionTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Coindistribution.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoindistributionTransfer)
				if err := _Coindistribution.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Coindistribution *CoindistributionFilterer) ParseTransfer(log types.Log) (*CoindistributionTransfer, error) {
	event := new(CoindistributionTransfer)
	if err := _Coindistribution.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoindistributionTransferForeignTokenIterator is returned from FilterTransferForeignToken and is used to iterate over the raw logs and unpacked data for TransferForeignToken events raised by the Coindistribution contract.
type CoindistributionTransferForeignTokenIterator struct {
	Event *CoindistributionTransferForeignToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoindistributionTransferForeignTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoindistributionTransferForeignToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoindistributionTransferForeignToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoindistributionTransferForeignTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoindistributionTransferForeignTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoindistributionTransferForeignToken represents a TransferForeignToken event raised by the Coindistribution contract.
type CoindistributionTransferForeignToken struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTransferForeignToken is a free log retrieval operation binding the contract event 0x5661684995ab94d684bfe57a43c4141578f52d3e7374e8cd3250e2f062e13ac1.
//
// Solidity: event TransferForeignToken(address token, address to, uint256 amount)
func (_Coindistribution *CoindistributionFilterer) FilterTransferForeignToken(opts *bind.FilterOpts) (*CoindistributionTransferForeignTokenIterator, error) {

	logs, sub, err := _Coindistribution.contract.FilterLogs(opts, "TransferForeignToken")
	if err != nil {
		return nil, err
	}
	return &CoindistributionTransferForeignTokenIterator{contract: _Coindistribution.contract, event: "TransferForeignToken", logs: logs, sub: sub}, nil
}

// WatchTransferForeignToken is a free log subscription operation binding the contract event 0x5661684995ab94d684bfe57a43c4141578f52d3e7374e8cd3250e2f062e13ac1.
//
// Solidity: event TransferForeignToken(address token, address to, uint256 amount)
func (_Coindistribution *CoindistributionFilterer) WatchTransferForeignToken(opts *bind.WatchOpts, sink chan<- *CoindistributionTransferForeignToken) (event.Subscription, error) {

	logs, sub, err := _Coindistribution.contract.WatchLogs(opts, "TransferForeignToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoindistributionTransferForeignToken)
				if err := _Coindistribution.contract.UnpackLog(event, "TransferForeignToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferForeignToken is a log parse operation binding the contract event 0x5661684995ab94d684bfe57a43c4141578f52d3e7374e8cd3250e2f062e13ac1.
//
// Solidity: event TransferForeignToken(address token, address to, uint256 amount)
func (_Coindistribution *CoindistributionFilterer) ParseTransferForeignToken(log types.Log) (*CoindistributionTransferForeignToken, error) {
	event := new(CoindistributionTransferForeignToken)
	if err := _Coindistribution.contract.UnpackLog(event, "TransferForeignToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
